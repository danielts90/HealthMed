name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    services:
      auth-db:
        image: postgres:latest
        env:
          POSTGRES_USER: healthmed
          POSTGRES_PASSWORD: healthmed
          POSTGRES_DB: healthMedUsersDb
        ports:
          - 5433:5432
      doctor-db:
        image: postgres:latest
        env:
          POSTGRES_USER: healthmed
          POSTGRES_PASSWORD: healthmed
          POSTGRES_DB: healthMedDoctorsDb
        ports:
          - 5434:5432
      patient-db:
        image: postgres:latest
        env:
          POSTGRES_USER: healthmed
          POSTGRES_PASSWORD: healthmed
          POSTGRES_DB: healthMedPatientsDb
        ports:
          - 5435:5432
      rabbitmq:
        image: rabbitmq:3-management
        ports:
          - 5672:5672
          - 15672:15672

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Setup .NET 8
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0.x'

      - name: Restore Dependencies
        run: dotnet restore

      - name: Build Solution
        run: dotnet build --no-restore --configuration Release

      - name: Run Tests
        run: dotnet test --no-build --configuration Release --collect:"XPlat Code Coverage" --logger trx

      - name: Upload Code Coverage Report
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./tests/**/TestResults/**/*.xml

      - name: SonarQube Analysis
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          dotnet tool install --global dotnet-sonarscanner
          dotnet sonarscanner begin /k:"healthmed_project" /d:sonar.host.url="https://sonarcloud.io" /d:sonar.token="$SONAR_TOKEN"
          dotnet build --configuration Release
          dotnet sonarscanner end /d:sonar.token="$SONAR_TOKEN"

  docker-build-push:
    runs-on: ubuntu-latest
    needs: build-and-test
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and Push Docker Images
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/auth-api:latest -f src/HealthMed.Auth/Dockerfile ./src/HealthMed.Auth
          docker build -t ${{ secrets.DOCKER_USERNAME }}/doctor-api:latest -f src/HealthMed.Doctor/Dockerfile ./src/HealthMed.Doctor
          docker build -t ${{ secrets.DOCKER_USERNAME }}/patient-api:latest ./Microservices/Patient
          docker push ${{ secrets.DOCKER_USERNAME }}/auth-api:latest
          docker push ${{ secrets.DOCKER_USERNAME }}/doctor-api:latest
          docker push ${{ secrets.DOCKER_USERNAME }}/patient-api:latest
